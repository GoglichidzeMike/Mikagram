{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","layout","whileHover","opacity","key","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","console","log","width","UploadForm","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5354aaa6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyDVNL1WPNUGE9vp5CtANG1mX1LiGjZA5Hg\",\r\n  authDomain: \"mikagram-13cb1.firebaseapp.com\",\r\n  databaseURL: \"https://mikagram-13cb1.firebaseio.com\",\r\n  projectId: \"mikagram-13cb1\",\r\n  storageBucket: \"mikagram-13cb1.appspot.com\",\r\n  messagingSenderId: \"750354294079\",\r\n  appId: \"1:750354294079:web:bda7eaa14f4d62d88e9f8a\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectFirestore, projectStorage, timestamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snap) => {\r\n        let documents = [];\r\n        snap.forEach((doc) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore(\"images\");\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs &&\r\n        docs.map((doc) => (\r\n          <motion.div\r\n            layout\r\n            whileHover={{ opacity: 1 }}\r\n            className=\"img-wrap\"\r\n            key={doc.id}\r\n            onClick={() => setSelectedImg(doc.url)}\r\n          >\r\n            <motion.img\r\n              src={doc.url}\r\n              alt=\"uploaded pic\"\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              transition={{ delay: 1 }}\r\n            />\r\n          </motion.div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n  return (\r\n    <motion.div\r\n      className=\"backdrop\"\r\n      onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img\r\n        src={selectedImg}\r\n        alt=\"full pic\"\r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      ></motion.img>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>Mikagram</h1>\n      <h2>Your Pictures</h2>\n      <p>Upload and save your shitty pictures here!</p>\n    </div>\n  )\n}\n\nexport default Title;","////\r\n// This hook uploads the file given to him. Also sets the progress-bar, returns progress url and the error if there is one.\r\n////\r\n// import { getDefaultNormalizer } from \"@testing-library/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    // creates file.name reference in the storage, so when the file is uploaded it has the name.\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n\r\n    //listens to state change, gets percentage and sets it to progress\r\n    // gets error and sets it to error\r\n    // gets url and sets it to url as well\r\n    //snap is a snapshot before the state is changed and it has its parameters like totalBytes and such.\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        //gets url when ready\r\n        const url = await storageRef.getDownloadURL();\r\n        const createdAt = timestamp();\r\n        //creates and populates collection\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n  console.log(progress, url)\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n\r\n  return <motion.div className=\"progress-bar\" initial={{width: 0}}\r\n  animate={{ width: progress + '%' }} ></motion.div>;\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const changeHandler = (e) => {\r\n    //grabs image\r\n    let selected = e.target.files[0];\r\n\r\n    //if image with the right type is selected, set file state to that image.\r\n    let types = [\"image/png\", \"image/jpeg\"];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image file. (png or jpeg)\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        {error && <div className=\"error\">{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}